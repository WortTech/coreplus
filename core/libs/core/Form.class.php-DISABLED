<?php
/**
 * @license GNU Affero General Public License v3 <http://www.gnu.org/licenses/agpl-3.0.txt>
 *
 * Copyright (C) 2009	Charlie Powell <powellc@powelltechs.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.	If not, see http://www.gnu.org/licenses/agpl-3.0.txt.
 */

/**
 * Base form object that provides a foundation for every other form object.
 *
 * @author powellc
 *
 */
class _FormObject{

	public $arguments = array();

	public $preHTML = '';

	public $postHTML = '';

	/**
	 * Internal function to set the requested argument as false.
	 *
	 * This will effectively enable the argument for the object.
	 *
	 * @param $arg string
	 * @return void
	 */
	protected function enableArgument($arg){
		if(!isset($this->arguments[$arg])) $this->arguments[$arg] = false;
	}

	/**
	 * Set the requested argument with the given value.
	 *
	 * @param $arg string
	 * @param $argValue string
	 * @return void
	 */
	public function setArgument($arg, $argValue){
		if(isset($this->arguments[$arg])) $this->arguments[$arg] = $argValue;
	}

	/**
	 * Generic wrapper around setArgument to allow extending class to have
	 *	more functionality due to their more comples property structures.
	 *
	 * @param $keyName
	 * @param $value
	 * @return void
	 */
	public function set($keyName, $value){
		switch(strtolower($keyName)){
			case 'callsmethod':
				$this->callsMethod = $value;
				break;
			default:
				$this->setArgument($keyName, $value);
		}
	}


	/**
	 * Get the requested argument for this object.
	 *
	 * @param $arg string
	 * @return mixed
	 */
	public function getArgument($arg){
		return isset($this->arguments[$arg])? $this->arguments[$arg] : null;
	}

	/**
	 * Set arguments via a key/value pair array.
	 *
	 * @param $argumentArray array <<string/mixed>>
	 * @return void
	 */
	public function setArguments($argumentArray){
		foreach($argumentArray as $key => $val){
			$this->set($key, $val);
		}
	}

	/**
	 * Get all arguments as a string.
	 *
	 * @return string
	 */
	public function getArgumentsAsString(){
		$argString = '';
		foreach($this->arguments as $key => $val){
			// Several 'special' case arguments.
			switch(strtolower($key)){
				case 'checked':
					if($this->arguments[$key]) $argString .= ' checked';
					break;
				case 'disabled':
					if($this->arguments[$key]) $argString .= ' disabled';
					break;
				case 'multiple':
					if($this->arguments[$key]) $argString .= ' multiple';
					break;
				case 'readonly':
					if($this->arguments[$key]) $argString .= ' readonly';
					break;
				default:
					if($this->arguments[$key] !== false) $argString .= ' ' . $key . '="' . str_replace('"', '\\"', $val) . '"';
			}
		}

		return $argString;
	}

	public function render(){
		die("This method must be extended.");
	}
	public function getErrors(){
		die("This method must be extended.");
	}
	public function hasError(){
		die("This method must be extended.");
	}
} // class _FormObject

class _FormParentObject extends _FormObject{
	public $templateName = 'default';

	public $elements = array();

	/**
	 * Array of human-readable errors to be displayed to the user via messages.
	 *
	 * These can be used for anything generic, ie: the submitting logic was too lazy to
	 * set an error on an element.
	 *
	 * @var array <<string>>
	 */
	public $errors = array();

	public function addElement(&$element){
		$element->setParent($this);
		$this->elements[] = $element;
	}

	public function getErrors(){
		$err = $this->errors;
		foreach($this->elements as $el){
			$elerr = $el->getErrors();
			if(!$elerr) continue;
//			var_dump($elerr);
			if(is_array($elerr)) $err = array_merge($err, $elerr);
			else $err[] = $elerr;
		}
		return $err;
	}

	public function clearErrors(){
		$this->errors = array();
		foreach($this->elements as $el){
			$el->error = null;
		}
	}

	/**
	 * Retrieve if this form object has an error in one of the elements.
	 * @return boolean
	 */
	public function hasError(){
		if(sizeof($this->errors) > 0) return true;

		if(isset($this->elements)){
			foreach($this->elements as $el){
				if($el->hasError()) return true;
			}
		}
		return false;
	}

	/**
	 * Method to add a generic error to this form.
	 */
	public function addError($errorText){
		$this->errors[] = $errorText;
	}

	public function _resolveTemplateFilename($elementType, $subTemplateType = 'default'){
		die("This method MUST be extended.");
	}

	public function loadFrom(&$sourceArray){
		foreach($this->elements as $el){

			switch($el->type){
				// Don't do any operation on a submit element.
				case 'submit': continue(2);
				// Don't do any operation on a reset element.
				case 'reset': continue(2);
				// Don't do any operation on a button element.
				case 'button': continue(2);
				case '_group':
					$el->loadFrom($sourceArray);
					continue(2);
				default:
					$el->loadFrom($sourceArray);
			}


		} // foreach($this->elements as $el)
//		die();
	}

	public function getElementByName($name){
		foreach($this->elements as $el){
			if(($elFound = $el->getElementByName($name)) !== false) return $elFound;
		}
		return false;
	}

	public function getElements(){
		$els = array();
		foreach($this->elements as $el){
			if($el->type == '_group'){
				$els = array_merge($els, $el->getElements());
			}
			else{
				$els[] = $el;
			}
		}
		return $els;
	}
}

class Form extends _FormParentObject implements Iterator{

	/**
	 * a Quasi-unique ID used for saving this form into the user's session.
	 *
	 * If the user navigates to a different page on a different tab, try to keep
	 *	the user's form data from the previous page in the event that he/she
	 *	switches back to the old page.
	 *
	 * Combine this with the name of the form, (if given) via getUniqueID().
	 *
	 * @var hexidecimal
	 */
	public $uniqueID;

	/**
	 * Set the expire length to 2 hours.
	 *
	 * This should be long enough for any object to be deleted from the session.
	 *
	 * @var int
	 */
	static $ExpireLength = 7200;

	/**
	 * Timestamp for when this form object expires.
	 * @var int
	 */
	public $expires;

	public $arguments = array(
		'accept' => false,
		'accept-charset' => false,
		'action' => '',
		'class' => 'StandardForm',
		'enctype' => false,
		'id' => false,
		'method' => 'POST',
		'name' => false,
		'style' => false,
		'target' => false,
	);

	public $elements = array();

	public $callsMethod = null;

	/**
	 * Array of links to all elements in this form object, used for iteration.
	 *
	 * @var array
	 */
	private $_elements = null;
	private $_current = null;

	public function __construct($arguments = array()){

		$this->uniqueID = rand(1, 4) . Core::RandomHex(7);

		$this->setArguments($arguments);
	}

	public function get($el_name){
		return $this->getElementByName($el_name);
	}

	public function rewind(){
//		echo 'REWIND<br>';
		$this->_current = 0;
		$this->_elements = $this->getElements();
	}
	public function current(){
//		echo 'CURRENT<br>';
		if(is_null($this->_elements)) $this->reset();

		return $this->_elements[$this->_current];
	}
	public function key(){
//		echo 'KEY<br>';
		if(is_null($this->_elements)) $this->reset();

		return $this->_current;
	}
	public function next(){
//		echo 'NEXT<br>';
		if(is_null($this->_elements)) $this->reset();

		$this->_current++;
	}
	public function valid(){
//		echo 'VALID<br>';
		if(is_null($this->_elements)) $this->reset();

		return isset($this->_elements[$this->_current]);
	}

	public function render(){
		// Hmm... let me try something... if the form was submitted...
		// Ignore the name attribute, as this is not really needed for determining if
		//	the form was posted before.
		//if($this->getArgument('name') != null){
			if(strtolower($this->getArgument('method')) == 'post' && sizeof($_POST) > 0 && isset($_POST['___formUniqueID'])){
				//$name = substr($_POST['___formUniqueID'], 0, -2);
				$name = true;
				$id = substr($_POST['___formUniqueID'], -2);
			}
			elseif(strtolower($this->getArgument('method')) == 'get' && sizeof($_GET) > 0 && isset($_GET['___formUniqueID'])){
				//$name = substr($_GET['___formUniqueID'], 0, -2);
				$name = true;
				$id = substr($_GET['___formUniqueID'], -2);
			}
			else $name = false;

//			var_dump($name, $this->getArgument('name'), $id, $_SESSION['FormData']);
			//if($name && $name == $this->getArgument('name') && isset($_SESSION['FormData']) && isset($_SESSION['FormData'][$id])){
			if($name && isset($_SESSION['FormData']) && isset($_SESSION['FormData'][$id])){

				// Replace this for data with that from the session!	w00t
				if(($f = unserialize($_SESSION['FormData'][$id]))){
					$this->uniqueID = $f->uniqueID;
					$this->elements = $f->elements;
				}
			}
		//}

		//$file = Template::Resolve('forms/form.tpl');
		//if(!$file && $this->templateName != 'default') $file = Template::Resolve('forms/default/form.tpl');
		$file = 'forms/form.tpl';

		if(!$file) return '<div>ERROR - ' . $this->template . ' template for forms could not be found!</div>';

		// Check if there are any file input types in this form, if so, add the enctype attribute.
		if(!$this->arguments['enctype']){
			$els = $this->getElements();
			$hasFileElement = false;
			foreach($els as $el){
				if($el->type == 'file') $hasFileElement = true;
			}
			if($hasFileElement) $this->arguments['enctype'] = 'multipart/form-data';
		}

		// Fix the action path if needed.
		if($this->arguments['action'] && $this->arguments['action']{0} == '/' && strpos($this->arguments['action'], ROOT_WDIR) !== 0){
			$this->arguments['action'] = ROOT_WDIR . substr($this->arguments['action'], 1);
		}

		$elements = '';

		if(!is_null($this->callsMethod) || $this->arguments['action']){
			// Create a new hidden element to hold this form's unique ID.
			$hiddenEl = new FormHidden(array(
				'name' => '___formUniqueID',
				'value' => $this->getUniqueID(),
			));
			$hiddenEl->setParent($this);
			$elements .= $hiddenEl->render();
		}

		foreach($this->elements as $el){
			$elements .= $el->render();
		}

		$this->expires = Time::GetCurrent() + Form::$ExpireLength;
		$this->saveToSession();

		$tpl = new Template();
		$tpl->assign('form', $this);
		$tpl->assign('elements', $elements);
		return $tpl->fetch($file);

	}

	public function getUniqueID(){
		return $this->arguments['name'] . $this->uniqueID;
	}
	
	public function setArgument($argument, $value){
		switch($argument){
			case 'callsmethod':
				if(is_array($value)) $this->callsMethod = $value;
				elseif(strpos($value, '::') !== false) $this->callsMethod = explode('::', $value);
				else $this->callsMethod = $value;
				return true;
				break;
			default:
				return parent::setArgument($argument, $value);
		}
	}

	/**
	 * Internally used function to resolve a template filename.
	 * Needs to be public because form element children need to access it.
	 *
	 * @access public
	 * @param $elementType
	 * @param $subTemplateType
	 * @return string
	 */
	public function _resolveTemplateFilename($elementType, $subTemplateType = 'default'){
		$elementType = strtolower($elementType);
		switch($elementType){
			case 'group':
				// Try to get the requested group in the current theme.
				//$file = Template::Resolve('forms/' . $this->templateName . '/groups/' . $subTemplateType . '.tpl');
				$file = 'forms/groups/' . $subTemplateType . '.tpl';
				// Or, try to get the default group in the current theme.
				if(!$file && $subTemplateType != 'default') $file = Template::Resolve('forms/' . $this->templateName . '/groups/default.tpl');
				// Or, try to get the default group in the default theme.
				if(!$file) $file = Template::Resolve('forms/default/groups/default.tpl');
				break;
			default:
				// Try to get the requested element in the current theme.
				//$file = Template::Resolve('forms/' . $this->templateName . '/elements/' . $elementType . '.tpl');
				$file = 'forms/elements/' . $elementType . '.tpl';
				// Or, try to get the requested element in the default theme.
				if(!$file) $file = Template::Resolve('forms/default/elements/' . $elementType . '.tpl');
				break;
		}

		return $file;
	}

	/**
	 * Internal method to save a serialized version of this object
	 *	 into the database so it can be loaded upon submitting.
	 *
	 * @return void
	 */
	private function saveToSession(){
		if(is_null($this->callsMethod)) return; // Don't save anything if there's no method to call.
		$_SESSION['FormData']["{$this->uniqueID}"] = serialize($this);
	}

	private function removeFromSession(){
		unset($_SESSION['FormData']["{$this->uniqueID}"]);
	}

	public static function CheckSavedSessionData(){
		if(!(isset($_SESSION['FormData']) && is_array($_SESSION['FormData']))) return;

		foreach($_SESSION['FormData'] as $key => $obj){

			// If the object isn't a valid object after unserializing...
			if(!($el = unserialize($obj))){
				unset($_SESSION['FormData'][$key]);
				continue;
			}

			// Check the expires time
//				echo "Checking exp. time of " . date('Y-m-d, h:i:s', $el->expires) . '<br>';
			if($el->expires <= Time::GetCurrent()){
				unset($_SESSION['FormData'][$key]);
				continue;
			}

			// Check to see if the form was submitted.
			$go = false;
			switch(strtolower($el->arguments['method'])){
				case 'post':
					if(isset($_POST['___formUniqueID']) && $_POST['___formUniqueID'] == $el->getUniqueID()){
						// Load the data into the object.
						$el->clearErrors();
						$el->loadFrom($_POST);
						$go = true;
					}
					break;
				case 'get':
					if(isset($_GET['___formUniqueID']) && $_GET['___formUniqueID'] == $el->getUniqueID()){
						$el->clearErrors();
						$el->loadFrom($_GET);
						$go = true;
					}
					break;
			}

			// If go time...
			if($go){
				var_dump($el); die();
				$hasError = $el->hasError();
				// Only run the user function if there are no errors from required, regex, etc.
				if(!$hasError) $status = call_user_func($el->callsMethod, &$el);

//				var_dump($status); die();
				if($hasError || $status === false){
					foreach($el->getErrors() as $er){
						if($er === true) continue;
						Core::SetMessage($er, 'error');
					}
					// Also, serialize this form back up so it can be rendered with the standard page later on in this execution.
					$_SESSION['FormData'][$el->uniqueID] = serialize($el);
					return; // ANd return back to the script for page processing to complete.
				}
				else{
					$el->removeFromSession();
					if($status === true){
						Core::Reload();
					}
					else{
						Core::Redirect($status);
					}
				}
			} // if($go)
		} // foreach($_SESSION['FormData'] as $key => $obj)
	} // public static function CheckSavedSessionData()

	public static function BuildFromModel(Model $model){
		$f = new Form();

		// Add the initial model tracker, will remember which model is attached.
		$f->addElement(new FormSessionOnly(array('name' => '___modelname', 'value' => get_class($model))));

		$new = $model->isnew();

		foreach($model->getColumnStructure() as $k => $v){
			if($new && $v['autoinc']) continue; // Skip the AI column if it doesn't exist.

			if(!$new && $v['primary'] && $k == 'id'){
				// This is a hidden form element.
				$f->addElement(new FormHidden(array('name' => "model[$k]", 'value' => $model->get($k))));
				continue;
			}

			if($v['type'] == 'accessstring'){
				// @todo Implement this with the new user system.
				//$f->addElement(new Form)
				$f->addElement(new FormHidden(array('name' => "model[$k]", 'value' => '*')));
				continue;
			}

			if($v['type'] == 'string'){
				$f->addElement(new FormText(array('name' => "model[$k]", 'value' => $model->get($k), 'maxlength' => $v['maxlength'], 'title' => $v['name'])));
				continue;
			}

			if($v['type'] == 'text'){
				$f->addElement(new FormTextarea(array('name' => "model[$k]", 'value' => $model->get($k), 'title' => $v['name'])));
				continue;
			}

			var_dump($v);
		}

		return $f;
	}

} // class Form

class FormGroup extends _FormParentObject{

	public $title;

	public $type = '_group';

	public $description;

	public $arguments = array(
		'accesskey' => false,
		'class' => 'StandardFormGroup',
		'dir' => false,
		'id' => false,
		'lang' => false,
		'name' => false,
		'style' => false,
	);

	/**
	 *
	 * @var _FormParentObject
	 */
	private $parentFormObject;

	public function __construct($arguments = array()){

		$this->setArguments($arguments);
	}

	public function setParent(&$parentObject){
		$this->parentFormObject = $parentObject;
	}

	public function _resolveTemplateFilename($elementType, $subTemplateType = 'default'){
		// Just pass this onto the group's parent.
		return $this->parentFormObject->_resolveTemplateFilename($elementType, $subTemplateType);
	}
	public function render(){

		$file = $this->parentFormObject->_resolveTemplateFilename('group');

		if(!$file) return '<div>ERROR - ' . $this->type . ' form template could not be found!</div>';

		$elements = '';

		foreach($this->elements as $el){
			$elements .= $el->render();
		}

		$tpl = new Template();
		$tpl->assign('group', $this);
		$tpl->assign('elements', $elements);
		return $tpl->fetch($file);
	}

	/**
	 * Set arguments, value, title, or description for this form element.
	 * @param $keyName
	 * @param $value
	 * @return unknown_type
	 */
	public function set($keyName, $value){
		$keyName = strtolower($keyName);
		switch($keyName){
			case 'title':
			case 'label':
				$this->title = $value;
				break;
			case 'description':
				$this->description = $value;
				break;
			default:
				$this->setArgument($keyName, $value);
				break;
		}
	}
}


class FormElement extends _FormObject{
	/**
	 *
	 * @var _FormParentObject
	 */
	private $parentFormObject;

	public $type = null;

	public $title = null;
	public $description = null;
	public $value = null;

	/**
	 * Set to true if this field has an error.
	 * @var boolean | string
	 */
	public $error = false;

	public $templateJSFriendly = false;

	public $arguments = array(
		'accesskey' => false,
		'class' => 'StandardFormElement',
		'dir' => false,
		'disabled' => false,
		'id' => false,
		'lang' => false,
		'name' => false,
		'required' => false,
		'size' => false,
		'style' => false,
		'tabindex' => false,
		'width' => false,
		'height' => false
	);

	public function __construct($arguments = array()){
		$this->setArguments($arguments);
	}

	public function setParent(&$parentObject){
		$this->parentFormObject = $parentObject;
	}

	public function render(){
		$file = $this->parentFormObject->_resolveTemplateFilename($this->type);

		if(!$file) return '<div>ERROR - ' . $this->type . ' form template could not be found!</div>';

		// If multiple is set, but the name does not have a [] at the end.... add it.
		if($this->getArgument('multiple') && ! preg_match('/.*\[.*\]/', $this->arguments['name'])) $this->arguments['name'] .= '[]';

		$tpl = new Template();

		$tpl->assign('element', $this);

		return $tpl->fetch($file);
	}


	/**
	 * Set arguments, value, title, or description for this form element.
	 * @param $keyName
	 * @param $value
	 * @return unknown_type
	 */
	public function set($keyName, $value){
		$keyName = strtolower($keyName);
		switch($keyName){
			case 'value':
				$this->_setValue($value);
				break;
			case 'title':
			case 'label':
				$this->title = $value;
				break;
			case 'description':
				$this->description = $value;
				break;
			default:
				$this->setArgument($keyName, $value);
				break;
		}
	}

	private function _setValue($value){
		if(is_array($value)){
			$this->value = array();
			foreach($value as $key => $val){
				if(is_array($val)){
					$v = new _FormValueMulitple();
					$v->checked = @$val['checked'];
					$v->title = @$val['title'];
					$v->value = @$val['value'];
				}
				else{
					$v = new _FormValueMulitple();
					$v->value = $key;
					$v->title = $val;
				}
				$this->value[] = $v;
			}
		}
		else{
			$this->value = $value;
		}
	}

	public function getErrors(){
		return $this->error;
	}

	/**
	 * Retrieve if this form object has an error in one of the elements.
	 * @return boolean
	 */
	public function hasError(){
		return (is_null($this->error) || $this->error === false)? false : true;
	}

	public function addError($error){
		$this->error = $error;
	}

	/**
	 * Return either this element, or false if not its name.
	 *
	 * @param $name
	 * @return FormElement | false
	 */
	public function getElementByName($name){
		if($name == $this->getArgument('name')) return $this;
		else return false;
	}

	public function getValue(){
		return $this->value;
	}

	public function loadFrom(&$sourceArray){
		// First... set the error to false
		$this->error = false;

//	var_dump($el);
		$name = $this->getArgument('name');
//		var_dump($name);
		// This is a fun jumble of whorish code.
		//	Basicaly, what I need to do is manually check the incoming name for
		//	[*][*] (two levels of arrays),
		//	[*] (one level of array),
		//	or nothing, just straight variable.
		if(preg_match('/\[.*\]/', $name)){
//			var_dump($el->title);
			$p1 = substr($name, 0, strpos($name, '['));
			$p2 = substr($name, strlen($p1)+1, -1);
			$p3 = false; $p4 = false;
			if(($_pos = strpos($p2, ']')) !== false){
				$p3 = substr($p2, $_pos+2);
				$p2 = substr($p2, 0, $_pos);
			}
		if($p3 && ($_pos = strpos($p3, ']')) !== false){
				$p4 = substr($p3, $_pos+2);
				$p3 = substr($p3, 0, $_pos);
			}

			if($p4) $src = isset($sourceArray[$p1][$p2][$p3][$p4])? $sourceArray[$p1][$p2][$p3][$p4] : false;
			elseif($p3) $src = isset($sourceArray[$p1][$p2][$p3])? $sourceArray[$p1][$p2][$p3] : false;
			elseif($p2) $src = isset($sourceArray[$p1][$p2])? $sourceArray[$p1][$p2] : false;
			elseif($p1) $src = isset($sourceArray[$p1])? $sourceArray[$p1] : false;

			if(is_array($this->value)){
				foreach($this->value as $v){
					if($v->value == $src) $v->checked = true;
					else $v->checked = false;
				}
			}
			else{
				switch($this->type){
					case 'checkbox':
						// This check of is_array($src) is needed if multiple checkboxes have the same name, ie: remove[]
						//	In that case, the src will be an array with each one of the values present if they're checked.
						if(is_array($src)) $this->arguments['checked'] = (in_array($this->value, $src))? true : false;
						else $this->arguments['checked'] = ($src)? true : false;
						break;
					default:
						$this->value = $src;
				}
			}

		} // if(preg_match('/\[.*\]/', $name))
		else{
			if(is_array($this->value)){
				foreach($this->value as $v){
					if(isset($sourceArray[$name]) && $v->value == $sourceArray[$name]) $v->checked = true;
					else $v->checked = false;
				}
			}
			else{
				$this->value = (isset($sourceArray[$name]))? $sourceArray[$name] : null;
			}
		}

		if((is_null($this->value) || $this->value == '') && $this->getArgument('required')){
			$this->error = $this->title . ' is required.';
		}
	}
} // class FormElement

class FormCheckbox extends FormElement{
	public $type = 'checkbox';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('checked');

		$this->setArguments($arguments);
	}

}
class FormCheckboxes extends FormElement{
	public $type = 'checkboxes';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('checked');
		$this->enableArgument('multiple');

		$this->setArgument('multiple', true);

		$this->setArguments($arguments);
	}

	public function getValue(){
		die('This needs to be completed...');
	}
}
class FormHidden extends FormElement{
	public $type = 'hidden';
}
class FormText extends FormElement{
	public $type = 'text';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('maxlength');

		$this->setArguments($arguments);
	}
}
class FormTextarea extends FormElement{
	public $type = 'textarea';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('rows');
		$this->enableArgument('cols');

		$this->setArguments($arguments);
	}
}
class FormPassword extends FormText{
	public $type = 'password';
}
class FormFile extends FormElement{
	public $type = 'file';

	/**
	 *
	 * @var FileUpload
	 */
	public $file;

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('accept');

		$this->setArguments($arguments);
	}

	public function loadFrom(&$sourceArray){
		// Set any previous errors as moot.
		$this->error = false;
		// I don't really care about where the source array is, as it should be coming from the FILES array.

		$this->file = new FileUpload($this->getArgument('name'));

		if($this->file->error == UPLOAD_ERR_NO_FILE && $this->getArgument('required')){
			$this->error = $this->title . ' is required.';
			return;
		}

		if($this->file->error != UPLOAD_ERR_NO_FILE && $this->file->error != UPLOAD_ERR_OK){
			$this->error = 'Error in uploading ' . $this->title . '; ' . $this->file->getErrorMessage();
			return;
		}
	}

	public function getValue(){
		return $this->file;
	}

	public function fileUploaded(){
		return ($this->file->error != UPLOAD_ERR_NO_FILE);
	}
}

class FormSelect extends FormElement{
	public $type = 'select';

	public function getValue(){
		if(is_array($this->value)){
			foreach($this->value as $v){
				if($v->checked) return $v;
			}
		}
		else return $this->value;
	}
}
class FormHTML extends FormElement{
	public $type = 'html';
}
class FormButton extends FormElement{
	public $type = 'button';
}
class FormReset extends FormButton{
	public $type = 'reset';
}
class FormSubmit extends FormButton{
	public $type = 'submit';
}
class FormImage extends FormElement{
	public $type = 'image';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('alt');
		$this->enableArgument('src');

		$this->setArguments($arguments);
	}
}
class FormRadio extends FormElement{
	public $type = 'radio';

	public function __construct($arguments = array()){
		// Enable some basic arguments first.
		$this->enableArgument('checked');
		$this->enableArgument('multiple');

		$this->setArguments($arguments);
	}

	public function getValue(){
		if(is_array($this->value)){
			foreach($this->value as $v){
				if($v->checked) return $v->value;
			}
		}
		else return $this->value;
	}
}

class FormSessionOnly extends FormElement{
	public $type = '_session_only';
	
	public function __construct($arguments = array()){
		parent::__construct($arguments);
		
		// Remove some unneeded arguments.
	}
	
	// This form element does not actually render to the page, only sits back in the session data.
	// Generally for security reasons.
	public function  render() {
		return null;
	}
}


class FormPageInsertables extends FormGroup{
	public $type = 'page_insertables';

	public function  __construct($arguments = array()) {
		$this->enableArgument('baseurl');
		parent::__construct($arguments);
	}

	public function render(){
		if(!$this->title) $this->title = 'Page Content';

		// BaseURL needs to be set for this to work.
		if(!$this->arguments['baseurl']) return null;

		$p = new PageModel($this->arguments['baseurl']);

		// Ensure I can get the filename.
		$tpl = $p->getTemplateName();
		if(!$tpl) return null;
		$tpl = Template::ResolveFile($tpl);
		if(!$tpl) return null;

		// Remember this page href for after the submission.
		$this->addElement(new FormSessionOnly(array('name' => '___insertables_baseurl', 'value' => $this->arguments['baseurl'])));
		
		// Scan through $tpl and find any {insertable} tag.
		$tplcontents = file_get_contents($tpl);
		preg_match_all('/\{insertable(.*)\}(.*)\{\/insertable\}/isU', $tplcontents, $matches);

		// Guess this page had no insertables.
		if(!sizeof($matches[0])) return null;
		foreach($matches[0] as $k => $v){
			$tag = trim($matches[1][$k]);
			$content = trim($matches[2][$k]);

			// Pull out the name and label of this insertable.
			$name = preg_replace('/.*name=["\'](.*?)["\'].*/i', '$1', $tag);
			$title = preg_replace('/.*title=["\'](.*?)["\'].*/i', '$1', $tag);

			// Determine what the content is intelligently.  (or at least try to...)
			if(strpos($content, "\n") === false && strpos($content, "<") === false){
				// Regular text insert.
				$el = new FormText(array('name' => "insertable[$name]", 'title' => $title, 'value' => $content));
				$this->addElement($el);
			}
			elseif(preg_match('/<img(.*?)src=["\'](.*?)["\'](.*?)>/i', $content)){
				// It's an image.
				// @todo Image Upload form element
				//$el = new FormIm
			}
			else{
				// Just default back to a WYSIWYG.
				// @todo WYSIWYG editor....
				$el = new FormTextarea(array('name' => "insertable[$name]", 'title' => $title, 'value' => $content));
				$this->addElement($el);
			}
		}

		return parent::render();
	}
}



class _FormValueMulitple{
	public $value;
	public $title;
	public $checked = false;

	public function __toString(){
		return $this->value;
	}
}
