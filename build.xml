<?xml version="1.0" encoding="UTF-8"?>
<project name="Core Plus" default="build">
	<!--
	This template was snagged from http://jenkins-php.org/
	They have an awesome set of information for building PHP sites with Jenkins/Hudson.
	Go check them out, NAO!
	-->
	
	<!-- Pull in the user/server-definable settings for this project -->
	<property file="${basedir}/ant.properties"/>

	<!-- 
	The default target; build.
	This will do a basic lint test of the codebase, compile any necessary resources, and execute tests.
	-->
	<target name="build" depends="prepare,lint,compile,phpunit"/>
	
	<!-- 
	The complete build with all source code scanning and validation. 
	This takes about 10 minutes to complete on a high speed SSD, so be warned with running it!
	-->
	<target name="fullbuild" depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc,compile,phpunit,phpcb"/>

	<!--
		Delete the dynamic resources created in the build directory.
		Also clean out the dynamic resources in core itself.
	-->
	<target name="clean" description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api"/>
		<delete dir="${basedir}/build/code-browser"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete file="${basedir}/src/core/bootstrap.compiled.php"/>
	</target>

	<!--
		Create the 
	-->
	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="${basedir}/build/api"/>
		<mkdir dir="${basedir}/build/code-browser"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/phpdox"/>
	</target>
	
	<target name="compile" depends="clean" description="Compile the bootstrap.php file">
		<exec executable="${basedir}/utilities/compiler.php">
		</exec>
	</target>

	<!--
		Parse PHP files for basic syntax errors.
		If this fails, chances are you're using vim, nano, or emacs as an editor and have bigger concerns....
		USE AN ACTUAL EDITOR!  IDEs are little more than glorified text editors, but at least they do have basic syntax checking.
	-->
	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="true">
			<arg value="-l"/>

			<fileset dir="${basedir}/src">
				<include name="**/*.php"/>
				<modified/>
			</fileset>
		</apply>
	</target>

	<target name="phploc" description="Measure project size using PHPLOC">
		<exec executable="phploc">
			<arg value="--log-csv"/>
			<arg value="${basedir}/build/logs/phploc.csv"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="pdepend" description="Calculate software metrics using PHP_Depend">
		<exec executable="pdepend">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpmd"
	        description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpmd">
			<arg path="${basedir}/src"/>
			<arg value="text"/>
			<arg value="${basedir}/buildessentials/phpmd-coreplus.xml"/>
		</exec>
	</target>

	<target name="phpmd-ci"
	        description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
		<exec executable="phpmd">
			<arg path="${basedir}/src"/>
			<arg value="xml"/>
			<arg value="${basedir}/buildessentials/phpmd-coreplus.xml"/>
			<arg value="--reportfile"/>
			<arg value="${basedir}/build/logs/pmd.xml"/>
		</exec>
	</target>

	<target name="phpcs"
	        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpcs">
			<arg value="--standard=${basedir}/build/phpcs.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpcs-ci"
	        description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
		<exec executable="phpcs" output="/dev/null">
			<arg value="--report=checkstyle"/>
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
			<arg value="--standard=${basedir}/build/phpcs.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpcpd" description="Find duplicate code using PHPCPD">
		<exec executable="phpcpd">
			<arg value="--log-pmd"/>
			<arg value="${basedir}/build/logs/pmd-cpd.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpunit" description="Run unit tests with PHPUnit">
		<exec executable="phpunit" failonerror="true">
			<arg value="--colors"/>
			<arg value="--bootstrap"/>
			<arg value="${basedir}/src/utilities/phpunit-loader.php"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>
	
	<target name="phpdoc" depends="prepare" description="Generate phpDoc Documentation on the product">
		<exec executable="phpdoc" failonerror="false">			
			<!-- Scan this directory (source code) -->
			<arg value="-d"/>
			<arg value="${basedir}/src"/>
			<!-- Output to this directory (build directory) -->
			<arg value="-t"/>
			<arg value="${basedir}/build/phpdoc"/>
			<!-- Ignore files -->
			<arg value="-i"/>
			<arg value="bootstrap.compiled.php"/>
			<!-- Page title -->
			<arg value="--title"/>
			<arg value="Core Plus"/>
			<!-- Scan and log private and @internal methods too -->
			<arg value="--parseprivate"/>
		</exec>
	</target>

	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
		<exec executable="phpcb">
			<arg value="--log"/>
			<arg path="${basedir}/build/logs"/>
			<arg value="--source"/>
			<arg path="${basedir}/src"/>
			<arg value="--output"/>
			<arg path="${basedir}/build/code-browser"/>
		</exec>
	</target>
</project>
