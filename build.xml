<?xml version="1.0" encoding="UTF-8"?>
<project name="Core Plus" default="scan">
	<!--
	This template was snagged from http://jenkins-php.org/
	They have an awesome set of information for building PHP sites with Jenkins/Hudson.
	Go check them out, NAO!
	-->
	
	<!-- Pull in the user/server-definable settings for this project -->
	<property file="${basedir}/ant.properties"/>
	
	<tstamp>
		<format property="build.time" pattern="yyyy.MM.d@H:m" locale="en,US"/>
	</tstamp>



	<!-- 
	The default target; scan.
	This will do a basic lint test of the codebase, compile any necessary resources, and execute tests.
	-->
	<target name="scan" depends="prepare_build,lint,compile,phpunit"/>
	
	<!--
		Slightly more exhaustive than a scan.
		This will actually go through and build the site, including configuration file, htaccess, and reinstallation.
	-->
	<target name="build" depends="prepare_build,reinstall_src,lint,compile,phpunit"/>
	
	<!-- 
		The complete complete build with all purging, building, source code scanning, and validation. 
		This takes about 10 minutes to complete on a high speed SSD, so be warned with running it!
	-->
	<target name="fullbuild" depends="clean_build,prepare_build,purge_src,reinstall_src,lint,phploc,pdepend,phpcpd,phpdoc-ci,compile,phpunit-ci,phpcb,changelogs"/>

	<!--
		Delete the dynamic resources created in the build directory.
		Also clean out the dynamic resources in core itself.
	-->
	<target name="clean_build" description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api"/>
		<delete dir="${basedir}/build/code-browser"/>
		<delete dir="${basedir}/build/coverage"/>
		<delete dir="${basedir}/build/logs"/>
		<delete dir="${basedir}/build/phpdoc"/>
		<delete dir="${basedir}/build/pdepend"/>
		<delete dir="${basedir}/build/phpunit"/>
		<delete dir="${basedir}/build/changelogs"/>
	</target>
	
	<target name="clean_src" description="Cleanup the src directory from compiled resources and the like">
		<delete file="${basedir}/src/core/bootstrap.compiled.php"/>
	</target>

	<!--
		Create the 
	-->
	<target name="prepare_build" description="Ensure that all the build destination directories exist">
		<mkdir dir="${basedir}/build/api"/>
		<mkdir dir="${basedir}/build/code-browser"/>
		<mkdir dir="${basedir}/build/coverage"/>
		<mkdir dir="${basedir}/build/logs"/>
		<mkdir dir="${basedir}/build/pdepend"/>
		<mkdir dir="${basedir}/build/phpdoc"/>
		<mkdir dir="${basedir}/build/phpunit"/>
		<mkdir dir="${basedir}/build/changelogs"/>
		<mkdir dir="${basedir}/docs/phpdoc"/>
	</target>

	<target name="purge_src" depends="clean_src" description="Purge the configuration, htaccess, data, and everything for a given site.">
		<exec executable="${basedir}/utilities/purge_entire_site_and_all_configs.sh">
			<arg value="--really"/>
			<arg value="--reallyreally"/>
		</exec>
	</target>
	
	<target name="compile" depends="clean_src" description="Compile the bootstrap.php file">
		<exec executable="${basedir}/utilities/compiler.php">
			<arg value="--php"/>
		</exec>
	</target>

	<target name="setup_htaccess" description="Populate and setup the htaccess file from the template and ant properties">
		<copy tofile="${basedir}/src/.htaccess" file="${basedir}/src/htaccess.example" overwrite="true"/>
		<replace file="${basedir}/src/.htaccess">
			<replacefilter value="${rewritebase}" token="@{rewritebase}@"/>
			<replacefilter value="${build.time}" token="@{build.time}@"/>
		</replace>
	</target>
	
	<target name="setup_configuration" description="Populate and setup the configuration file from the template and ant properties">
		<copy tofile="${basedir}/src/config/configuration.xml" file="${basedir}/src/config/configuration.example.xml" overwrite="true"/>
		<replace file="${basedir}/src/config/configuration.xml">
			<replacefilter value="${build.time}" token="@{build.time}@"/>
			<replacefilter value="${db.server}" token="@{db.server}@"/>
			<replacefilter value="${db.port}" token="@{db.port}@"/>
			<replacefilter value="${db.type}" token="@{db.type}@"/>
			<replacefilter value="${db.name}" token="@{db.name}@"/>
			<replacefilter value="${db.user}" token="@{db.user}@"/>
			<replacefilter value="${db.pass}" token="@{db.pass}@"/>
			<replacefilter value="${devmode}" token="@{devmode}@"/>
		</replace>
	</target>

	<target name="reinstall_src" depends="setup_htaccess,setup_configuration" description="Install/Reinstall Core Plus using the CLI installer">
		<exec executable="${basedir}/utilities/reinstall.php"/>
	</target>

	<target name="changelogs" description="Generate HTML versions of all changelogs on the system">
		<exec executable="${basedir}/utilities/generate_changelogs.php"/>
	</target>

	<!--
		Parse PHP files for basic syntax errors.
		If this fails, chances are you're using vim, nano, or emacs as an editor and have bigger concerns....
		USE AN ACTUAL EDITOR!  IDEs are little more than glorified text editors, but at least they do have basic syntax checking.
	-->
	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="true">
			<arg value="-l"/>

			<fileset dir="${basedir}/src">
				<include name="**/*.php"/>
				<modified/>
			</fileset>
		</apply>
	</target>

	<target name="sonar" depends="compile">
		<exec executable="${basedir}/vendor/sonarqube/sonar-scanner-2.8/bin/sonar-scanner">
			<arg value="-Dsonar.host.url=${sonar.host.url}"/>
			<arg value="-Dsonar.login=${sonar.login}"/>
			<arg value="-Dsonar.projectKey=${sonar.projectKey}"/>
			<arg value="-Dsonar.projectName=${sonar.projectName}"/>
			<arg value="-Dsonar.projectVersion=${sonar.projectVersion}"/>
			<arg value="-Dsonar.sources=${sonar.src}"/>
		</exec>
	</target>

	<target name="phploc" depends="clean_src" description="Measure project size using PHPLOC">
		<exec executable="/opt/php/phploc">
			<arg value="--log-csv"/>
			<arg value="${basedir}/build/logs/phploc.csv"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="pdepend" depends="clean_src" description="Calculate software metrics using PHP_Depend">
		<exec executable="pdepend">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpmd" depends="clean_src"
	        description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpmd">
			<arg path="${basedir}/src"/>
			<arg value="text"/>
			<arg value="${basedir}/buildessentials/phpmd-coreplus.xml"/>
		</exec>
	</target>

	<target name="phpmd-ci" depends="clean_src"
	        description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
		<exec executable="phpmd">
			<arg path="${basedir}/src"/>
			<arg value="xml"/>
			<arg value="${basedir}/buildessentials/phpmd-coreplus.xml"/>
			<arg value="--reportfile"/>
			<arg value="${basedir}/build/logs/pmd.xml"/>
		</exec>
	</target>

	<target name="phpcs" depends="clean_src"
	        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpcs">
			<arg value="--standard=${basedir}/build/phpcs.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpcs-ci" depends="clean_src"
	        description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
		<exec executable="phpcs" output="/dev/null">
			<arg value="--report=checkstyle"/>
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
			<arg value="--standard=${basedir}/build/phpcs.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpcpd" depends="clean_src" description="Find duplicate code using PHPCPD">
		<exec executable="/opt/php/phpcpd.phar">
			<arg value="--log-pmd"/>
			<arg value="${basedir}/build/logs/pmd-cpd.xml"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpunit" depends="compile" description="Run unit tests with PHPUnit">
		<exec executable="/opt/php/phpunit.phar" failonerror="true">
			<arg value="--colors"/>
			<arg value="--bootstrap"/>
			<arg value="${basedir}/utilities/phpunit-loader.php"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>

	<target name="phpunit-ci" depends="compile" description="Run unit tests with PHPUnit (CI Compatible version)">
		<exec executable="/opt/php/phpunit.phar" failonerror="true">
			<arg value="--log-junit"/>
			<arg value="${basedir}/build/logs/junit.xml"/>
			<arg value="--coverage-clover"/>
			<arg value="${basedir}/build/logs/clover.xml"/>
			<arg value="--bootstrap"/>
			<arg value="${basedir}/utilities/phpunit-loader.php"/>
			<arg path="${basedir}/src"/>
		</exec>
	</target>
	
	<target name="phpdoc" depends="prepare_build,clean_src" description="Generate phpDoc Documentation on the product">
		<exec executable="/opt/php/phpDocumentor.phar" failonerror="true">
			<!-- Scan this directory (source code) -->
			<arg value="-d"/>
			<arg value="${basedir}/src"/>
			<!-- Output to this directory (build directory) -->
			<arg value="-t"/>
			<arg value="${basedir}/build/phpdoc"/>

			<!-- Ignore files -->
			<arg value="-i"/>
			<arg value="${basedir}/src/core/bootstrap.compiled.php,${basedir}/src/core/libs/smarty/*,${basedir}/src/core/libs/phpmailer/*,${basedir}/src/core/libs/aws-sdk/*,${basedir}/src/components/*"/>

			<!-- Page title -->
			<arg value="--title"/>
			<arg value="Core Plus Framework API Documentation"/>

			<!-- Scan and log private and @internal methods too -->
			<arg value="--parseprivate"/>
			
			<arg value="--template"/>
			<arg value="xml"/>
		</exec>
		
		<!-- Now, run the markdown converter. -->
		<exec executable="${basedir}/vendor/phpdoc-md-master/bin/phpdocmd">
			<arg value="${basedir}/build/phpdoc/structure.xml"/>
			<arg value="${basedir}/docs/phpdoc"/>
		</exec>
	</target>
	<target name="phpdoc-ci" depends="clean_build,prepare_build,clean_src" description="Generate phpDoc Documentation on the product (CI Compatible version)">
		<exec executable="/opt/php/phpDocumentor.phar" failonerror="false">
			<!-- Scan this directory (source code) -->
			<arg value="-d"/>
			<arg value="${basedir}/src"/>
			<!-- Output to this directory (build directory) -->
			<arg value="-t"/>
			<arg value="${basedir}/build/phpdoc"/>

			<!-- Ignore files -->
			<arg value="-i"/>
			<arg value="${basedir}/src/core/bootstrap.compiled.php,${basedir}/src/core/libs/smarty/*,${basedir}/src/core/libs/phpmailer/*,${basedir}/src/core/libs/aws-sdk/*"/>

			<!-- Page title -->
			<arg value="--title"/>
			<arg value="Core Plus"/>

			<!-- Scan and log private and @internal methods too -->
			<arg value="--parseprivate"/>

			<!-- Include Sourcecode -->
			<arg value="--sourcecode"/>

			<!-- SSSH -->
			<arg value="--quiet"/>
		</exec>
	</target>

	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
		<exec executable="phpcb">

			<arg value="--log"/>
			<arg path="${basedir}/build/logs"/>

			<arg value="--source"/>
			<arg path="${basedir}/src"/>

			<arg value="--output"/>
			<arg path="${basedir}/build/code-browser"/>

			<arg value="--exclude"/>
			<arg path="/usr"/>

			<arg value="--exclude"/>
			<arg path="/tmp"/>
		</exec>
	</target>
</project>
