CodeMirror.defineMode("haskell",function(){function j(q,r,p){r(p);return p(q,r)}var d=/[a-z_]/;var n=/[A-Z]/;var k=/[0-9]/;var c=/[0-9A-Fa-f]/;var o=/[0-7]/;var m=/[a-z_A-Z0-9']/;var l=/[-!#$%&*+.\/<=>?@\\^|~:]/;var e=/[(),;[\]`{}]/;var g=/[ \t\v\f]/;function h(r,s){if(r.eatWhile(g)){return null}var q=r.next();if(e.test(q)){if(q=="{"&&r.eat("-")){var p="comment";if(r.eat("#")){p="meta"}return j(r,s,i(p,1))}return null}if(q=="'"){if(r.eat("\\")){r.next()}else{r.next()}if(r.eat("'")){return"string"}return"error"}if(q=='"'){return j(r,s,f)}if(n.test(q)){r.eatWhile(m);if(r.eat(".")){return"qualifier"}return"variable-2"}if(d.test(q)){r.eatWhile(m);return"variable"}if(k.test(q)){if(q=="0"){if(r.eat(/[xX]/)){r.eatWhile(c);return"integer"}if(r.eat(/[oO]/)){r.eatWhile(o);return"number"}}r.eatWhile(k);var p="number";if(r.eat(".")){p="number";r.eatWhile(k)}if(r.eat(/[eE]/)){p="number";r.eat(/[-+]/);r.eatWhile(k)}return p}if(l.test(q)){if(q=="-"&&r.eat(/-/)){r.eatWhile(/-/);if(!r.eat(l)){r.skipToEnd();return"comment"}}var p="variable";if(q==":"){p="variable-2"}r.eatWhile(l);return p}return"error"}function i(p,q){if(q==0){return h}return function(t,u){var r=q;while(!t.eol()){var s=t.next();if(s=="{"&&t.eat("-")){++r}else{if(s=="-"&&t.eat("}")){--r;if(r==0){u(h);return p}}}}u(i(p,r));return p}}function f(q,r){while(!q.eol()){var p=q.next();if(p=='"'){r(h);return"string"}if(p=="\\"){if(q.eol()||q.eat(g)){r(b);return"string"}if(q.eat("&")){}else{q.next()}}}r(h);return"error"}function b(p,q){if(p.eat("\\")){return j(p,q,f)}p.next();q(h);return"error"}var a=(function(){var p={};function q(r){return function(){for(var s=0;s<arguments.length;s++){p[arguments[s]]=r}}}q("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_");q("keyword")("..",":","::","=","\\",'"',"<-","->","@","~","=>");q("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<=","=<<","==",">",">=",">>",">>=","^","^^","||","*","**");q("builtin")("Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True");q("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3");return p})();return{startState:function(){return{f:h}},copyState:function(p){return{f:p.f}},token:function(s,r){var q=r.f(s,function(t){r.f=t});var p=s.current();return(p in a)?a[p]:q}}});CodeMirror.defineMIME("text/x-haskell","haskell");