// Author: Koh Zi Han, based on implementation by Koh Zi Chun
CodeMirror.defineMode("scheme",function(){var j="builtin",o="comment",g="string",d="atom",i="number",f="bracket";var m=2;function s(y){var w={},x=y.split(" ");for(var v=0;v<x.length;++v){w[x[v]]=true}return w}var e=s("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");var n=s("define let letrec let* lambda");function c(v,w,x){this.indent=v;this.type=w;this.prev=x}function p(x,v,w){x.indentStack=new c(v,w,x.indentStack)}function k(v){v.indentStack=v.indentStack.prev}var b=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);var u=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);var q=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);var r=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);function a(v){return v.match(b)}function h(v){return v.match(u)}function t(w,v){if(v===true){w.backUp(1)}return w.match(r)}function l(v){return v.match(q)}return{startState:function(){return{indentStack:null,indentation:0,mode:false,sExprComment:false}},token:function(H,x){if(x.indentStack==null&&H.sol()){x.indentation=H.indentation()}if(H.eatSpace()){return null}var D=null;switch(x.mode){case"string":var B,w=false;while((B=H.next())!=null){if(B=='"'&&!w){x.mode=false;break}w=!w&&B=="\\"}D=g;break;case"comment":var B,E=false;while((B=H.next())!=null){if(B=="#"&&E){x.mode=false;break}E=(B=="|")}D=o;break;case"s-expr-comment":x.mode=false;if(H.peek()=="("||H.peek()=="["){x.sExprComment=0}else{H.eatWhile(/[^/s]/);D=o;break}default:var v=H.next();if(v=='"'){x.mode="string";D=g}else{if(v=="'"){D=d}else{if(v=="#"){if(H.eat("|")){x.mode="comment";D=o}else{if(H.eat(/[tf]/i)){D=d}else{if(H.eat(";")){x.mode="s-expr-comment";D=o}else{var z=null,A=false,G=true;if(H.eat(/[ei]/i)){A=true}else{H.backUp(1)}if(H.match(/^#b/i)){z=a}else{if(H.match(/^#o/i)){z=h}else{if(H.match(/^#x/i)){z=l}else{if(H.match(/^#d/i)){z=t}else{if(H.match(/^[-+0-9.]/,false)){G=false;z=t}else{if(!A){H.eat("#")}}}}}}if(z!=null){if(G&&!A){H.match(/^#[ei]/i)}if(z(H)){D=i}}}}}}else{if(/^[-+0-9.]/.test(v)&&t(H,true)){D=i}else{if(v==";"){H.skipToEnd();D=o}else{if(v=="("||v=="["){var F="";var C=H.column(),y;while((y=H.eat(/[^\s\(\[\;\)\]]/))!=null){F+=y}if(F.length>0&&n.propertyIsEnumerable(F)){p(x,C+m,v)}else{H.eatSpace();if(H.eol()||H.peek()==";"){p(x,C+1,v)}else{p(x,C+H.current().length,v)}}H.backUp(H.current().length-1);if(typeof x.sExprComment=="number"){x.sExprComment++}D=f}else{if(v==")"||v=="]"){D=f;if(x.indentStack!=null&&x.indentStack.type==(v==")"?"(":"[")){k(x);if(typeof x.sExprComment=="number"){if(--x.sExprComment==0){D=o;x.sExprComment=false}}}}else{H.eatWhile(/[\w\$_\-!$%&*+\.\/:<=>?@\^~]/);if(e&&e.propertyIsEnumerable(H.current())){D=j}else{D="variable"}}}}}}}}}return(typeof x.sExprComment=="number")?o:D},indent:function(v){if(v.indentStack==null){return v.indentation}return v.indentStack.indent}}});CodeMirror.defineMIME("text/x-scheme","scheme");