<?php
/**
 * Handles most of the user interaction and acts as a base for the
 * various specific User-backends to extend from.
 *
 * @package User
 * @since 1.9
 * @author Charlie Powell <charlie@eval.bz>
 * @copyright Copyright (C) 2009-2013  Charlie Powell
 * @license GNU Affero General Public License v3 <http://www.gnu.org/licenses/agpl-3.0.txt>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/agpl-3.0.txt.
 */

class User {


	//////////  PRIVATE METHODS \\\\\\\\\\\\\


	//////////  PROTECTED METHODS  \\\\\\\\\\\

	protected function __construct(){
		// This cannot be called directly, it should be extended with the appropriate backend.
	}

	/**
	 * Get the bound user model.
	 *
	 * @since 2011.07
	 * @return UserModel
	 */
	public function _getModel(){
		if($this->_model === null){
			$this->_model = new UserModel();
		}

		return $this->_model;
	}

	/**
	 * Lookup and see if this model instance has a draft saved for it.
	 *
	 * @return bool
	 */
	public function hasDraft(){
		if(!Core::IsComponentAvailable('model-audit')){
			// If the underlying component is not available, drafts cannot be enabled!
			return false;
		}
		else{
			if(ModelAudit\Helper::ModelHasDraft($this->_getModel())) return true;

			// This needs to include the config options too.
			foreach($this->getConfigObjects() as $c){
				if(ModelAudit\Helper::ModelHasDraft($c)) return true;
			}

			return false;
		}
	}

	/**
	 * Get the draft ID of this user, (or its config)
	 *
	 * @return string
	 */
	public function getDraftID(){
		if(!Core::IsComponentAvailable('model-audit')){
			// If the underlying component is not available, drafts cannot be enabled!
			return '';
		}
		else{
			if(ModelAudit\Helper::ModelHasDraft($this->_getModel())) return $this->_getModel()->get('___auditmodel')->get('revision');

			// This needs to include the config options too.
			foreach($this->getConfigObjects() as $c){
				if(ModelAudit\Helper::ModelHasDraft($c)){
					return $c->get('___auditmodel')->get('revision');
				}
			}

			return false;
		}
	}

	/**
	 * Get the draft status of this model.
	 *
	 * @return string
	 */
	public function getDraftStatus(){
		$this->hasDraft();
		if(!$this->exists()){
			// If it's here, it must be a draft creation :p
			return 'pending_creation';
		}
		elseif($this->hasDraft() && $this->get('___auditmodel') && $this->get('___auditmodel')->get('data') == '[]'){
			// A blank data record on the audit model indicates that the request is to be deleted.
			return 'pending_deletion';
		}
		elseif($this->hasDraft()){
			// Otherwise, just changes were performed.
			return 'pending_update';
		}
		else{
			// And if it exists and no draft object attached... then this doesn't have one.
			return '';
		}
	}

	/**
	 * Find the user for this object based on given criteria.
	 * This is open for the extending backends to utilize.
	 *
	 * @since 2011.07
	 *
	 * @param array       $where
	 * @param int         $limit
	 * @param string|null $order
	 */
	protected function _find($where = array(), $limit = 1, $order = null){
		$this->_model = UserModel::Find($where, $limit, $order);
	}
}

class UserException extends Exception{

}
